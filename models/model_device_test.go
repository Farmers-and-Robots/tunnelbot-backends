// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: Tunnelbot - OpenAPI 3.0
//	Version: 1
package models

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDevice_Validate(t *testing.T) {
	tests := []struct {
		name      string
		m         Device
		assertion assert.ErrorAssertionFunc
	}{
		{
			name:      "valid",
			m:         ValidDevice,
			assertion: assert.NoError,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.assertion(t, tt.m.Validate())
		})
	}
}

func TestDevice_GetCategory(t *testing.T) {
	tests := []struct {
		name string
		m    Device
		want DeviceCategory
	}{
		{
			name: "valid",
			m:    ValidDevice,
			want: DeviceCategory("heating"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetCategory())
		})
	}
}

func TestDevice_SetCategory(t *testing.T) {
	type args struct {
		val DeviceCategory
	}
	tests := []struct {
		name string
		m    *Device
		args args
	}{
		{
			name: "valid",
			m:    &ValidDevice,
			args: args{val: NewValidDeviceCategory},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetCategory(tt.args.val)
		})
	}
}

func TestDevice_GetId(t *testing.T) {
	tests := []struct {
		name string
		m    Device
		want int64
	}{
		{
			name: "valid",
			m:    ValidDevice,
			want: 1,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetId())
		})
	}
}

func TestDevice_SetId(t *testing.T) {
	type args struct {
		val int64
	}
	tests := []struct {
		name string
		m    *Device
		args args
	}{{
		name: "valid",
		m:    &ValidDevice,
		args: args{val: NewValidDevice.Id},
	},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetId(tt.args.val)
		})
	}
}

func TestDevice_GetKind(t *testing.T) {
	tests := []struct {
		name string
		m    Device
		want string
	}{
		{
			name: "valid",
			m:    ValidDevice,
			want: "dev",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetKind())
		})
	}
}

func TestDevice_SetKind(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Device
		args args
	}{{
		name: "valid",
		m:    &ValidDevice,
		args: args{val: NewValidDevice.Kind},
	},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetKind(tt.args.val)
		})
	}
}

func TestDevice_GetName(t *testing.T) {
	tests := []struct {
		name string
		m    Device
		want string
	}{
		{
			name: "valid",
			m:    ValidDevice,
			want: "Test Device",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetName())
		})
	}
}

func TestDevice_SetName(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Device
		args args
	}{
		{
			name: "valid",
			m:    &ValidDevice,
			args: args{val: NewValidDevice.Name},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetName(tt.args.val)
		})
	}
}
