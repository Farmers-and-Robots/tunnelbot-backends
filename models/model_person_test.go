// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: Tunnelbot - OpenAPI 3.0
//	Version: 1
package models

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPerson_Validate(t *testing.T) {
	tests := []struct {
		name      string
		m         Person
		assertion assert.ErrorAssertionFunc
	}{
		{
			name:      "valid person",
			m:         ValidPerson,
			assertion: assert.NoError,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.assertion(t, tt.m.Validate())
		})
	}
}

func TestPerson_GetDisplayName(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want string
	}{
		{
			name: "get display name",
			m:    ValidPerson,
			want: "Test Person",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetDisplayName())
		})
	}
}

func TestPerson_SetDisplayName(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set display name",
			m:    &ValidPerson,
			args: args{val: "Test Person 2"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetDisplayName(tt.args.val)
		})
	}
}

func TestPerson_GetEmail(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want string
	}{
		{
			name: "get email",
			m:    ValidPerson,
			want: "foo@far.com",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetEmail())
		})
	}
}

func TestPerson_SetEmail(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set email",
			m:    &ValidPerson,
			args: args{val: NewValidPerson.Email},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetEmail(tt.args.val)
		})
	}
}

func TestPerson_GetFarmAssociations(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want []FarmAssociation
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetFarmAssociations())
		})
	}
}

func TestPerson_SetFarmAssociations(t *testing.T) {
	type args struct {
		val []FarmAssociation
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetFarmAssociations(tt.args.val)
		})
	}
}

func TestPerson_GetFirstName(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want string
	}{
		{
			name: "get first name",
			m:    ValidPerson,
			want: "Test",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetFirstName())
		})
	}
}

func TestPerson_SetFirstName(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set first name",
			m:    &ValidPerson,
			args: args{val: NewValidPerson.FirstName},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetFirstName(tt.args.val)
		})
	}
}

func TestPerson_GetId(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want int64
	}{
		{
			name: "get id",
			m:    ValidPerson,
			want: 1,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetId())
		})
	}
}

func TestPerson_SetId(t *testing.T) {
	type args struct {
		val int64
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set id",
			m:    &ValidPerson,
			args: args{val: NewValidPerson.Id},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetId(tt.args.val)
		})
	}
}

func TestPerson_GetKind(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want string
	}{
		{
			name: "get kind",
			m:    ValidPerson,
			want: "per",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetKind())
		})
	}
}

func TestPerson_SetKind(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set kind",
			m:    &ValidPerson,
			args: args{val: NewValidPerson.Kind},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetKind(tt.args.val)
		})
	}
}

func TestPerson_GetLastName(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want string
	}{
		{
			name: "get last name",
			m:    ValidPerson,
			want: "Person",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetLastName())
		})
	}
}

func TestPerson_SetLastName(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set last name",
			m:    &ValidPerson,
			args: args{val: NewValidPerson.LastName},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetLastName(tt.args.val)
		})
	}
}

func TestPerson_GetPhone(t *testing.T) {
	tests := []struct {
		name string
		m    Person
		want string
	}{
		{
			name: "get phone",
			m:    ValidPerson,
			want: "555-555-5555",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetPhone())
		})
	}
}

func TestPerson_SetPhone(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *Person
		args args
	}{
		{
			name: "set phone",
			m:    &ValidPerson,
			args: args{val: NewValidPerson.Phone},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetPhone(tt.args.val)
		})
	}
}
