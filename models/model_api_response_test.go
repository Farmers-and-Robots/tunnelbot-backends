// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: Tunnelbot - OpenAPI 3.0
//	Version: 1
package models

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestApiResponse_Validate(t *testing.T) {
	tests := []struct {
		name      string
		m         ApiResponse
		assertion assert.ErrorAssertionFunc
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.assertion(t, tt.m.Validate())
		})
	}
}

func TestApiResponse_GetCode(t *testing.T) {
	tests := []struct {
		name string
		m    ApiResponse
		want int32
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetCode())
		})
	}
}

func TestApiResponse_SetCode(t *testing.T) {
	type args struct {
		val int32
	}
	tests := []struct {
		name string
		m    *ApiResponse
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetCode(tt.args.val)
		})
	}
}

func TestApiResponse_GetMessage(t *testing.T) {
	tests := []struct {
		name string
		m    ApiResponse
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetMessage())
		})
	}
}

func TestApiResponse_SetMessage(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *ApiResponse
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetMessage(tt.args.val)
		})
	}
}

func TestApiResponse_GetType(t *testing.T) {
	tests := []struct {
		name string
		m    ApiResponse
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, tt.m.GetType())
		})
	}
}

func TestApiResponse_SetType(t *testing.T) {
	type args struct {
		val string
	}
	tests := []struct {
		name string
		m    *ApiResponse
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.m.SetType(tt.args.val)
		})
	}
}
