/*
 * Tunnelbot - OpenAPI 3.0
 *
 * This is the API specification for the tunnelbot backend.
 *
 * API version: 1
 * Contact: info@farmersandrobots.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Tunnel struct for Tunnel
type Tunnel struct {
	Id *int64 `json:"id,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Name string `json:"name"`
}

// NewTunnel instantiates a new Tunnel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTunnel(name string, ) *Tunnel {
	this := Tunnel{}
	this.Name = name
	return &this
}

// NewTunnelWithDefaults instantiates a new Tunnel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTunnelWithDefaults() *Tunnel {
	this := Tunnel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Tunnel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tunnel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Tunnel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Tunnel) SetId(v int64) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Tunnel) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tunnel) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Tunnel) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *Tunnel) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value
func (o *Tunnel) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tunnel) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tunnel) SetName(v string) {
	o.Name = v
}

func (o Tunnel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableTunnel struct {
	value *Tunnel
	isSet bool
}

func (v NullableTunnel) Get() *Tunnel {
	return v.value
}

func (v *NullableTunnel) Set(val *Tunnel) {
	v.value = val
	v.isSet = true
}

func (v NullableTunnel) IsSet() bool {
	return v.isSet
}

func (v *NullableTunnel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTunnel(val *Tunnel) *NullableTunnel {
	return &NullableTunnel{value: val, isSet: true}
}

func (v NullableTunnel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTunnel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


