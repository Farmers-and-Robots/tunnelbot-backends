/*
 * Tunnelbot - OpenAPI 3.0
 *
 * This is the API specification for the tunnelbot backend.
 *
 * API version: 1
 * Contact: info@farmersandrobots.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Farm struct for Farm
type Farm struct {
	Id *int64 `json:"id,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Name *string `json:"name,omitempty"`
	CreateDate *time.Time `json:"createDate,omitempty"`
	Address *Address `json:"address,omitempty"`
	Owners *[]PersonAssociation `json:"owners,omitempty"`
	People *[]PersonAssociation `json:"people,omitempty"`
}

// NewFarm instantiates a new Farm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarm() *Farm {
	this := Farm{}
	return &this
}

// NewFarmWithDefaults instantiates a new Farm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmWithDefaults() *Farm {
	this := Farm{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Farm) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Farm) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Farm) SetId(v int64) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Farm) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Farm) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *Farm) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Farm) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Farm) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Farm) SetName(v string) {
	o.Name = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *Farm) GetCreateDate() time.Time {
	if o == nil || o.CreateDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || o.CreateDate == nil {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *Farm) HasCreateDate() bool {
	if o != nil && o.CreateDate != nil {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *Farm) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Farm) GetAddress() Address {
	if o == nil || o.Address == nil {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetAddressOk() (*Address, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Farm) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *Farm) SetAddress(v Address) {
	o.Address = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *Farm) GetOwners() []PersonAssociation {
	if o == nil || o.Owners == nil {
		var ret []PersonAssociation
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetOwnersOk() (*[]PersonAssociation, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *Farm) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given []PersonAssociation and assigns it to the Owners field.
func (o *Farm) SetOwners(v []PersonAssociation) {
	o.Owners = &v
}

// GetPeople returns the People field value if set, zero value otherwise.
func (o *Farm) GetPeople() []PersonAssociation {
	if o == nil || o.People == nil {
		var ret []PersonAssociation
		return ret
	}
	return *o.People
}

// GetPeopleOk returns a tuple with the People field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Farm) GetPeopleOk() (*[]PersonAssociation, bool) {
	if o == nil || o.People == nil {
		return nil, false
	}
	return o.People, true
}

// HasPeople returns a boolean if a field has been set.
func (o *Farm) HasPeople() bool {
	if o != nil && o.People != nil {
		return true
	}

	return false
}

// SetPeople gets a reference to the given []PersonAssociation and assigns it to the People field.
func (o *Farm) SetPeople(v []PersonAssociation) {
	o.People = &v
}

func (o Farm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CreateDate != nil {
		toSerialize["createDate"] = o.CreateDate
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.People != nil {
		toSerialize["people"] = o.People
	}
	return json.Marshal(toSerialize)
}

type NullableFarm struct {
	value *Farm
	isSet bool
}

func (v NullableFarm) Get() *Farm {
	return v.value
}

func (v *NullableFarm) Set(val *Farm) {
	v.value = val
	v.isSet = true
}

func (v NullableFarm) IsSet() bool {
	return v.isSet
}

func (v *NullableFarm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarm(val *Farm) *NullableFarm {
	return &NullableFarm{value: val, isSet: true}
}

func (v NullableFarm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


