/*
 * Tunnelbot - OpenAPI 3.0
 *
 * This is the API specification for the tunnelbot backend.
 *
 * API version: 1
 * Contact: info@farmersandrobots.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PersonAssociation struct for PersonAssociation
type PersonAssociation struct {
	PersonId *int64 `json:"personId,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Email *string `json:"email,omitempty"`
	Role *Role `json:"role,omitempty"`
}

// NewPersonAssociation instantiates a new PersonAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonAssociation() *PersonAssociation {
	this := PersonAssociation{}
	return &this
}

// NewPersonAssociationWithDefaults instantiates a new PersonAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonAssociationWithDefaults() *PersonAssociation {
	this := PersonAssociation{}
	return &this
}

// GetPersonId returns the PersonId field value if set, zero value otherwise.
func (o *PersonAssociation) GetPersonId() int64 {
	if o == nil || o.PersonId == nil {
		var ret int64
		return ret
	}
	return *o.PersonId
}

// GetPersonIdOk returns a tuple with the PersonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonAssociation) GetPersonIdOk() (*int64, bool) {
	if o == nil || o.PersonId == nil {
		return nil, false
	}
	return o.PersonId, true
}

// HasPersonId returns a boolean if a field has been set.
func (o *PersonAssociation) HasPersonId() bool {
	if o != nil && o.PersonId != nil {
		return true
	}

	return false
}

// SetPersonId gets a reference to the given int64 and assigns it to the PersonId field.
func (o *PersonAssociation) SetPersonId(v int64) {
	o.PersonId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PersonAssociation) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonAssociation) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PersonAssociation) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PersonAssociation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PersonAssociation) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonAssociation) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PersonAssociation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PersonAssociation) SetEmail(v string) {
	o.Email = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *PersonAssociation) GetRole() Role {
	if o == nil || o.Role == nil {
		var ret Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonAssociation) GetRoleOk() (*Role, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *PersonAssociation) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given Role and assigns it to the Role field.
func (o *PersonAssociation) SetRole(v Role) {
	o.Role = &v
}

func (o PersonAssociation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PersonId != nil {
		toSerialize["personId"] = o.PersonId
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullablePersonAssociation struct {
	value *PersonAssociation
	isSet bool
}

func (v NullablePersonAssociation) Get() *PersonAssociation {
	return v.value
}

func (v *NullablePersonAssociation) Set(val *PersonAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonAssociation(val *PersonAssociation) *NullablePersonAssociation {
	return &NullablePersonAssociation{value: val, isSet: true}
}

func (v NullablePersonAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


