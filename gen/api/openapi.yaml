openapi: 3.0.3
info:
  contact:
    email: info@farmersandrobots.com
  description: This is the API specification for the tunnelbot backend.
  license:
    name: GNU General Public License
    url: https://www.gnu.org/licenses/
  title: Tunnelbot - OpenAPI 3.0
  version: "1"
externalDocs:
  description: See the Tunnelbot project -
  url: https://github.com/orgs/Farmers-and-Robots/projects/4
servers:
- url: https://tunnelbot.swagger.io/api/v1
security:
- firebase: []
tags:
- description: Operations for creating the farm scope in tunnelbot.
  name: farm
- description: Operations for tunnels in tunnelbot.
  name: tunnel
- description: Manage admins and workers for a tunnel farm.
  name: people
- description: Control devices in tunnels with a connector.
  externalDocs:
    description: Find out more
    url: https://github.com/orgs/Farmers-and-Robots/projects/4
  name: device
paths:
  /farm:
    post:
      description: Add a new farm to the db
      operationId: addFarm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        description: Create a new farm in the db
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new farm to the db
      tags:
      - farm
    put:
      description: Update an existing farm by ID
      operationId: updateFarm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        description: Update an existent farm
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Farm not found
        "405":
          description: Validation exception
      summary: Update an existing farm
      tags:
      - farm
  /farm/findByName:
    get:
      description: Looks up the farm by name
      operationId: findFarmByName
      parameters:
      - description: String for farm name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: successful operation
        "400":
          description: Invalid status value
      summary: Finds a farm by name
      tags:
      - farm
  /farm/{farmId}:
    delete:
      description: delete a farm
      operationId: deleteFarm
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Farm id to delete
        explode: false
        in: path
        name: farmId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid farm value
      summary: Deletes a farm
      tags:
      - farm
    get:
      description: Returns a single farm
      operationId: getFarmById
      parameters:
      - description: id of farm to return
        explode: false
        in: path
        name: farmId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
            application/xml:
              schema:
                $ref: '#/components/schemas/Farm'
          description: successful operation
        "400":
          description: Invalid id supplied
        "404":
          description: Farm not found
      summary: Find farm by id
      tags:
      - farm
  /farm/addFarmAccess/{farmId}:
    put:
      description: Add farm access for an existing person
      operationId: addPerson
      parameters:
      - description: id of farm to return
        explode: false
        in: path
        name: farmId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
        description: Add farm access for an existent person
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Farm not found
        "405":
          description: Validation exception
      summary: Add farm access for an existing person
      tags:
      - farm
  /farm/removeFarmAccess/{farmId}:
    put:
      description: Remove farm access for an existing person
      operationId: removePerson
      parameters:
      - description: id of farm to return
        explode: false
        in: path
        name: farmId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        description: remove farm access for an existent person
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Farm not found
        "405":
          description: Validation exception
      summary: Remove farm access for an existing person
      tags:
      - farm
  /tunnel:
    get:
      description: Return the tunnels on a farm
      operationId: getTunnels
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tunnel'
                type: array
          description: Successful operation
        "405":
          description: Invalid input
      summary: Return the tunnels on a farm
      tags:
      - tunnel
    post:
      description: Add a new tunnel to the db
      operationId: addTunnel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tunnel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tunnel'
        description: Create a new tunnel in the db
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunnel'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new tunnel to the db
      tags:
      - tunnel
    put:
      description: Update an existing tunnel by ID
      operationId: updateTunnel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tunnel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tunnel'
        description: Update an existent tunnel
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunnel'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Tunnel not found
        "405":
          description: Validation exception
      summary: Update an existing tunnel
      tags:
      - tunnel
  /tunnel/{tunnelId}:
    delete:
      description: delete a tunnel
      operationId: deleteTunnel
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Tunnel id to delete
        explode: false
        in: path
        name: tunnelId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid tunnel value
      summary: Deletes a tunnel
      tags:
      - tunnel
    get:
      description: Returns a single tunnel
      operationId: getTunnelById
      parameters:
      - description: id of tunnel to return
        explode: false
        in: path
        name: tunnelId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunnel'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tunnel'
          description: successful operation
        "400":
          description: Invalid id supplied
        "404":
          description: Tunnel not found
      summary: Find tunnel by id
      tags:
      - tunnel
  /device:
    get:
      description: Return the devices on a farm
      operationId: getDevices
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: Successful operation
        "405":
          description: Invalid input
      summary: Return the devices on a farm
      tags:
      - device
    post:
      description: Add a new device to the db
      operationId: addDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
        description: Create a new device in the db
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new device to the db
      tags:
      - device
    put:
      description: Update an existing device by ID
      operationId: updateDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
        description: Update an existent device
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Device not found
        "405":
          description: Validation exception
      summary: Update an existing device
      tags:
      - device
  /device/{deviceId}:
    delete:
      description: delete a device
      operationId: deleteDevice
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Device id to delete
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid device value
      summary: Deletes a device
      tags:
      - device
    get:
      description: Returns a single device
      operationId: getDeviceById
      parameters:
      - description: id of device to return
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
            application/xml:
              schema:
                $ref: '#/components/schemas/Device'
          description: successful operation
        "400":
          description: Invalid id supplied
        "404":
          description: Device not found
      summary: Find device by id
      tags:
      - device
  /people/:
    get:
      description: Return the people associated with a farm
      operationId: getPeople
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Person'
                type: array
          description: Successful operation
      summary: Return the people associated with a farm
      tags:
      - people
  /people/{personId}:
    get:
      description: Returns a single person
      operationId: getPersonById
      parameters:
      - description: id of person to return
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
          description: successful operation
        "400":
          description: Invalid id supplied
        "404":
          description: Person not found
      summary: Find person by id
      tags:
      - people
components:
  requestBodies:
    Farm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Farm'
      description: Farm object that needs to be added to db
    Tunnel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tunnel'
    Device:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
      description: Tunnel object that needs to be added to db
    Person:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Person'
      description: Person object that needs to be added or removed from farm
  schemas:
    Farm:
      example:
        address:
          zip: "52001"
          city: Dubuque
          street: 549 Almond St
          state: IA
        kind: frm
        name: FaR by the River
        owners:
        - role: owner
          displayName: munjeli
          personId: 10
          email: info@farmersandrobots.com
        - role: owner
          displayName: munjeli
          personId: 10
          email: info@farmersandrobots.com
        id: 10
        people:
        - role: owner
          displayName: munjeli
          personId: 10
          email: info@farmersandrobots.com
        - role: owner
          displayName: munjeli
          personId: 10
          email: info@farmersandrobots.com
        createDate: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          example: 10
          format: int64
          type: integer
        kind:
          example: frm
          type: string
        name:
          example: FaR by the River
          type: string
        createDate:
          format: date-time
          type: string
        address:
          $ref: '#/components/schemas/Address'
        owners:
          items:
            $ref: '#/components/schemas/PersonAssociation'
          type: array
        people:
          items:
            $ref: '#/components/schemas/PersonAssociation'
          type: array
      type: object
      x-swagger-router-model: tunnelbot.model.Order
    Tunnel:
      example:
        kind: tun
        name: tunnel01
        id: 10
      properties:
        id:
          example: 10
          format: int64
          type: integer
        kind:
          example: tun
          type: string
        name:
          example: tunnel01
          type: string
      required:
      - name
      type: object
      x-swagger-router-model: tunnelbot.model.Tunnel
    Tunnels:
      items:
        $ref: '#/components/schemas/Tunnel'
      type: array
      x-swagger-router-model: tunnelbot.model.Tunnels
    Device:
      example:
        kind: dvc
        name: tunnel01
        id: 10
      properties:
        id:
          example: 10
          format: int64
          type: integer
        kind:
          example: dvc
          type: string
        name:
          example: tunnel01
          type: string
        category:
          $ref: '#/components/schemas/DeviceCategory'
      required:
      - name
      type: object
      x-swagger-router-model: tunnelbot.model.Device
    Devices:
      items:
        $ref: '#/components/schemas/Device'
      type: array
      x-swagger-router-model: tunnelbot.model.Devices
    Person:
      example:
        firstName: Ele
        lastName: Munjeli
        phone: "12345"
        farmAssociations:
        - farmName: Far by the River
          role: owner
          farmId: 10
        - farmName: Far by the River
          role: owner
          farmId: 10
        kind: ppl
        displayName: munjeli
        id: 10
        email: info@farmersandrobots.com
      properties:
        id:
          example: 10
          format: int64
          type: integer
        kind:
          example: ppl
          type: string
        displayName:
          example: munjeli
          type: string
        firstName:
          example: Ele
          type: string
        lastName:
          example: Munjeli
          type: string
        email:
          example: info@farmersandrobots.com
          type: string
        phone:
          example: "12345"
          type: string
        farmAssociations:
          items:
            $ref: '#/components/schemas/FarmAssociation'
          type: array
      x-swagger-router-model: tunnelbot.model.Person
    Address:
      example:
        zip: "52001"
        city: Dubuque
        street: 549 Almond St
        state: IA
      properties:
        street:
          example: 549 Almond St
          type: string
        city:
          example: Dubuque
          type: string
        state:
          example: IA
          type: string
        zip:
          example: "52001"
          type: string
      type: object
    DeviceCategory:
      enum:
      - curtain
      - heating
      - irrigation
      - weather
      - lighting
      - fan
      - other
      type: string
    FarmAssociation:
      example:
        farmName: Far by the River
        role: owner
        farmId: 10
      properties:
        farmId:
          example: 10
          format: int64
          type: integer
        farmName:
          example: Far by the River
          type: string
        role:
          $ref: '#/components/schemas/Role'
    PersonAssociation:
      example:
        role: owner
        displayName: munjeli
        personId: 10
        email: info@farmersandrobots.com
      properties:
        personId:
          example: 10
          format: int64
          type: integer
        displayName:
          example: munjeli
          type: string
        email:
          example: info@farmersandrobots.com
          type: string
        role:
          $ref: '#/components/schemas/Role'
    Role:
      enum:
      - worker
      - admin
      - owner
      example: owner
      type: string
    ApiResponse:
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object
  securitySchemes:
    firebase:
      flows:
        implicit:
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
      type: oauth2
      x-google-issuer: https://securetoken.google.com/tunnelbot
      x-google-jwks_uri: https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com
      x-google-audiences: tunnelbot
