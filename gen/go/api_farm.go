/*
 * Tunnelbot - OpenAPI 3.0
 *
 * This is the API specification for the tunnelbot backend.
 *
 * API version: 1
 * Contact: info@farmersandrobots.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A FarmApiController binds http requests to an api service and writes the service results to the http response
type FarmApiController struct {
	service FarmApiServicer
}

// NewFarmApiController creates a default api controller
func NewFarmApiController(s FarmApiServicer) Router {
	return &FarmApiController{ service: s }
}

// Routes returns all of the api route for the FarmApiController
func (c *FarmApiController) Routes() Routes {
	return Routes{ 
		{
			"AddFarm",
			strings.ToUpper("Post"),
			"/api/v1/farm",
			c.AddFarm,
		},
		{
			"AddPerson",
			strings.ToUpper("Put"),
			"/api/v1/farm/addFarmAccess/{farmId}",
			c.AddPerson,
		},
		{
			"DeleteFarm",
			strings.ToUpper("Delete"),
			"/api/v1/farm/{farmId}",
			c.DeleteFarm,
		},
		{
			"FindFarmByName",
			strings.ToUpper("Get"),
			"/api/v1/farm/findByName",
			c.FindFarmByName,
		},
		{
			"GetFarmById",
			strings.ToUpper("Get"),
			"/api/v1/farm/{farmId}",
			c.GetFarmById,
		},
		{
			"RemovePerson",
			strings.ToUpper("Put"),
			"/api/v1/farm/removeFarmAccess/{farmId}",
			c.RemovePerson,
		},
		{
			"UpdateFarm",
			strings.ToUpper("Put"),
			"/api/v1/farm",
			c.UpdateFarm,
		},
	}
}

// AddFarm - Add a new farm to the db
func (c *FarmApiController) AddFarm(w http.ResponseWriter, r *http.Request) { 
	farm := &Farm{}
	if err := json.NewDecoder(r.Body).Decode(&farm); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AddFarm(r.Context(), *farm)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// AddPerson - Add farm access for an existing person
func (c *FarmApiController) AddPerson(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	farmId, err := parseInt64Parameter(params["farmId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	farm := &Farm{}
	if err := json.NewDecoder(r.Body).Decode(&farm); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AddPerson(r.Context(), farmId, *farm)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// DeleteFarm - Deletes a farm
func (c *FarmApiController) DeleteFarm(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	farmId, err := parseInt64Parameter(params["farmId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	apiKey := r.Header.Get("api_key")
	result, err := c.service.DeleteFarm(r.Context(), farmId, apiKey)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// FindFarmByName - Finds a farm by name
func (c *FarmApiController) FindFarmByName(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	name := query.Get("name")
	result, err := c.service.FindFarmByName(r.Context(), name)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetFarmById - Find farm by id
func (c *FarmApiController) GetFarmById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	farmId, err := parseInt64Parameter(params["farmId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetFarmById(r.Context(), farmId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// RemovePerson - Remove farm access for an existing person
func (c *FarmApiController) RemovePerson(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	farmId, err := parseInt64Parameter(params["farmId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	farm := &Farm{}
	if err := json.NewDecoder(r.Body).Decode(&farm); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.RemovePerson(r.Context(), farmId, *farm)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// UpdateFarm - Update an existing farm
func (c *FarmApiController) UpdateFarm(w http.ResponseWriter, r *http.Request) { 
	farm := &Farm{}
	if err := json.NewDecoder(r.Body).Decode(&farm); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.UpdateFarm(r.Context(), *farm)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
