/*
 * Tunnelbot - OpenAPI 3.0
 *
 * This is the API specification for the tunnelbot backend.
 *
 * API version: 1
 * Contact: info@farmersandrobots.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A TunnelApiController binds http requests to an api service and writes the service results to the http response
type TunnelApiController struct {
	service TunnelApiServicer
}

// NewTunnelApiController creates a default api controller
func NewTunnelApiController(s TunnelApiServicer) Router {
	return &TunnelApiController{ service: s }
}

// Routes returns all of the api route for the TunnelApiController
func (c *TunnelApiController) Routes() Routes {
	return Routes{ 
		{
			"AddTunnel",
			strings.ToUpper("Post"),
			"/api/v1/tunnel",
			c.AddTunnel,
		},
		{
			"DeleteTunnel",
			strings.ToUpper("Delete"),
			"/api/v1/tunnel/{tunnelId}",
			c.DeleteTunnel,
		},
		{
			"GetTunnelById",
			strings.ToUpper("Get"),
			"/api/v1/tunnel/{tunnelId}",
			c.GetTunnelById,
		},
		{
			"UpdateTunnel",
			strings.ToUpper("Put"),
			"/api/v1/tunnel",
			c.UpdateTunnel,
		},
	}
}

// AddTunnel - Add a new tunnel to the db
func (c *TunnelApiController) AddTunnel(w http.ResponseWriter, r *http.Request) { 
	tunnel := &Tunnel{}
	if err := json.NewDecoder(r.Body).Decode(&tunnel); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.AddTunnel(r.Context(), *tunnel)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// DeleteTunnel - Deletes a tunnel
func (c *TunnelApiController) DeleteTunnel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	tunnelId, err := parseInt64Parameter(params["tunnelId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	apiKey := r.Header.Get("api_key")
	result, err := c.service.DeleteTunnel(r.Context(), tunnelId, apiKey)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetTunnelById - Find tunnel by id
func (c *TunnelApiController) GetTunnelById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	tunnelId, err := parseInt64Parameter(params["tunnelId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetTunnelById(r.Context(), tunnelId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// UpdateTunnel - Update an existing tunnel
func (c *TunnelApiController) UpdateTunnel(w http.ResponseWriter, r *http.Request) { 
	tunnel := &Tunnel{}
	if err := json.NewDecoder(r.Body).Decode(&tunnel); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.UpdateTunnel(r.Context(), *tunnel)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
