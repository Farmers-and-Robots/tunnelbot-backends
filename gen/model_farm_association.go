/*
 * Tunnelbot - OpenAPI 3.0
 *
 * This is the API specification for the tunnelbot backend.
 *
 * API version: 1
 * Contact: info@farmersandrobots.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FarmAssociation struct for FarmAssociation
type FarmAssociation struct {
	FarmId *int64 `json:"farmId,omitempty"`
	FarmName *string `json:"farmName,omitempty"`
	Role *Role `json:"role,omitempty"`
}

// NewFarmAssociation instantiates a new FarmAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmAssociation() *FarmAssociation {
	this := FarmAssociation{}
	return &this
}

// NewFarmAssociationWithDefaults instantiates a new FarmAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmAssociationWithDefaults() *FarmAssociation {
	this := FarmAssociation{}
	return &this
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *FarmAssociation) GetFarmId() int64 {
	if o == nil || o.FarmId == nil {
		var ret int64
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAssociation) GetFarmIdOk() (*int64, bool) {
	if o == nil || o.FarmId == nil {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *FarmAssociation) HasFarmId() bool {
	if o != nil && o.FarmId != nil {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given int64 and assigns it to the FarmId field.
func (o *FarmAssociation) SetFarmId(v int64) {
	o.FarmId = &v
}

// GetFarmName returns the FarmName field value if set, zero value otherwise.
func (o *FarmAssociation) GetFarmName() string {
	if o == nil || o.FarmName == nil {
		var ret string
		return ret
	}
	return *o.FarmName
}

// GetFarmNameOk returns a tuple with the FarmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAssociation) GetFarmNameOk() (*string, bool) {
	if o == nil || o.FarmName == nil {
		return nil, false
	}
	return o.FarmName, true
}

// HasFarmName returns a boolean if a field has been set.
func (o *FarmAssociation) HasFarmName() bool {
	if o != nil && o.FarmName != nil {
		return true
	}

	return false
}

// SetFarmName gets a reference to the given string and assigns it to the FarmName field.
func (o *FarmAssociation) SetFarmName(v string) {
	o.FarmName = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *FarmAssociation) GetRole() Role {
	if o == nil || o.Role == nil {
		var ret Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAssociation) GetRoleOk() (*Role, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *FarmAssociation) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given Role and assigns it to the Role field.
func (o *FarmAssociation) SetRole(v Role) {
	o.Role = &v
}

func (o FarmAssociation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FarmId != nil {
		toSerialize["farmId"] = o.FarmId
	}
	if o.FarmName != nil {
		toSerialize["farmName"] = o.FarmName
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableFarmAssociation struct {
	value *FarmAssociation
	isSet bool
}

func (v NullableFarmAssociation) Get() *FarmAssociation {
	return v.value
}

func (v *NullableFarmAssociation) Set(val *FarmAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmAssociation(val *FarmAssociation) *NullableFarmAssociation {
	return &NullableFarmAssociation{value: val, isSet: true}
}

func (v NullableFarmAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


