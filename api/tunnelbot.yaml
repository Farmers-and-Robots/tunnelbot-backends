openapi: 3.0.3
info:
  title: Tunnelbot - OpenAPI 3.0
  description: |-
    This is the API specification for the tunnelbot backend.
  contact:
    email: info@farmersandrobots.com
  license:
    name: GNU General Public License
    url: https://www.gnu.org/licenses/
  version: 1
externalDocs:
  description: See the Tunnelbot project - 
  url: https://github.com/orgs/Farmers-and-Robots/projects/4
servers:
  - url: https://tunnelbot.swagger.io/api/v1
tags:
  - name: farm
    description: Operations for creating the farm scope in tunnelbot.
  - name: tunnels
    description: Operations for tunnels in tunnelbot.
  - name: people
    description: Manage admins and workers for a tunnel farm.
  - name: devices
    description: Control devices in tunnels with a connector.
    externalDocs:
      description: Find out more
      url: https://github.com/orgs/Farmers-and-Robots/projects/4
paths:
  /farm:
    put:
      tags:
        - pet
      summary: Update an existing farm
      description: Update an existing farm by ID
      operationId: updateFarm
      requestBody:
        description: Update an existent farm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
        '400':
          description: Invalid ID supplied
        '404':
          description: Farm not found
        '405':
          description: Validation exception
      security:
        - tunnelbot_auth:
            - write:farm
            - read:farm
    post:
      tags:
        - farm
      summary: Add a new farm to the db
      description: Add a new farm to the db
      operationId: addFarm
      requestBody:
        description: Create a new farm in the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
        '405':
          description: Invalid input
      security:
        - tunnelbot_auth:
            - write:farm
            - read:farm
  /farm/findByName:
    get:
      tags:
        - farm
      summary: Finds a farm by name
      description: Looks up the farm by name
      operationId: findFarmByName
      parameters:
        - name: name
          in: query
          description: String for farm name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Farm'
        '400':
          description: Invalid status value
      security:
        - tunnelbot_auth:
            - write:farm
            - read:farm
  /farm/{farmId}:
    get:
      tags:
        - farm
      summary: Find farm by id
      description: Returns a single farm
      operationId: getFarmById
      parameters:
        - name: farmId
          in: path
          description: id of farm to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
            application/xml:
              schema:
                $ref: '#/components/schemas/Farm'
        '400':
          description: Invalid id supplied
        '404':
          description: Farm not found
      security:
        - api_key: []
        - tunnelbot_auth:
            - write:farm
            - read:farm
    delete:
      tags:
        - farm
      summary: Deletes a farm
      description: delete a farm
      operationId: deleteFarm
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: farmId
          in: path
          description: Farm id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid farm value
      security:
        - tunnelbot_auth:
            - write:farm
            - read:farm
  /farm/addFarmAccess/{farmId}:
    put:
      tags:
        - farm
      summary: Add farm access for an existing person
      description: Add farm access for an existing person
      operationId: addPerson
      requestBody:
        description: Add farm access for an existent person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
        '400':
          description: Invalid ID supplied
        '404':
          description: Farm not found
        '405':
          description: Validation exception
      security:
        - tunnelbot_auth:
            - write:farm
            - read:farm
  /farm/removeFarmAccess/{farmId}:
    put:
      tags:
        - farm
      summary: Remove farm access for an existing person
      description: Remove farm access for an existing person
      operationId: removePerson
      requestBody:
        description: remove farm access for an existent person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
        '400':
          description: Invalid ID supplied
        '404':
          description: Farm not found
        '405':
          description: Validation exception
      security:
        - tunnelbot_auth:
            - write:farm
            - read:farm
  /tunnel:
    put:
      tags:
        - pet
      summary: Update an existing tunnel
      description: Update an existing tunnel by ID
      operationId: updateTunnel
      requestBody:
        description: Update an existent tunnel
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tunnel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tunnel'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunnel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tunnel not found
        '405':
          description: Validation exception
      security:
        - tunnelbot_auth:
            - write:tunnel
            - read:tunnel
    post:
      tags:
        - tunnel
      summary: Add a new tunnel to the db
      description: Add a new tunnel to the db
      operationId: addTunnel
      requestBody:
        description: Create a new tunnel in the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tunnel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tunnel'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunnel'
        '405':
          description: Invalid input
      security:
        - tunnelbot_auth:
            - write:tunnel
            - read:tunnel
  /tunnel/{tunnelId}:
    get:
      tags:
        - tunnel
      summary: Find tunnel by id
      description: Returns a single tunnel
      operationId: getTunnelById
      parameters:
        - name: tunnelId
          in: path
          description: id of tunnel to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunnel'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tunnel'
        '400':
          description: Invalid id supplied
        '404':
          description: Tunnel not found
      security:
        - api_key: [ ]
        - tunnelbot_auth:
            - write:tunnel
            - read:tunnel
    delete:
      tags:
        - tunnel
      summary: Deletes a tunnel
      description: delete a tunnel
      operationId: deleteTunnel
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: tunnelId
          in: path
          description: Tunnel id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid tunnel value
      security:
        - tunnelbot_auth:
            - write:tunnel
            - read:tunnel
  /device:
    put:
      tags:
        - device
      summary: Update an existing device
      description: Update an existing device by ID
      operationId: updateDevice
      requestBody:
        description: Update an existent device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
        '405':
          description: Validation exception
      security:
        - tunnelbot_auth:
            - write:device
            - read:device
    post:
      tags:
        - device
      summary: Add a new device to the db
      description: Add a new device to the db
      operationId: addDevice
      requestBody:
        description: Create a new device in the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '405':
          description: Invalid input
      security:
        - tunnelbot_auth:
            - write:device
            - read:device
  /device/{deviceId}:
    get:
      tags:
        - device
      summary: Find device by id
      description: Returns a single device
      operationId: getDeviceById
      parameters:
        - name: deviceId
          in: path
          description: id of device to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
            application/xml:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Invalid id supplied
        '404':
          description: Device not found
      security:
        - api_key: [ ]
        - tunnelbot_auth:
            - write:device
            - read:device
    delete:
      tags:
        - device
      summary: Deletes a device
      description: delete a device
      operationId: deleteDevice
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: deviceId
          in: path
          description: Device id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid device value
      security:
        - tunnelbot_auth:
            - write:device
            - read:device
  /people/{personId}:
    get:
      tags:
        - people
      summary: Find person by id
      description: Returns a single person
      operationId: getPersonById
      parameters:
        - name: personId
          in: path
          description: id of person to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid id supplied
        '404':
          description: Person not found
      security:
        - api_key: [ ]
        - tunnelbot_auth:
            - write:people
            - read:people
components:
  schemas:
    Farm:
      x-swagger-router-model: tunnelbot.model.Order
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: FaR by the River
        createDate:
          type: string
          format: date-time
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        owner:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        people:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Person'
      type: object
    Address:
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: 94301
      xml:
        name: address
      type: object
    Person:
      x-swagger-router-model: tunnelbot.model.Person
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: 12345
        role:
          type: string
          description: The role the person has on a farm
          example: worker
          enum:
            - worker
            - admin
            - owner
      type: object
    Tunnel:
      x-swagger-router-model: tunnelbot.model.Tunnel
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: tunnel01
      type: object
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Lighting
    Device:
      x-swagger-router-model: tunnelbot.model.Device
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: tunnel01
        category:
          $ref: '#/components/schemas/Category'
      type: object
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      type: object
  requestBodies:
    Farm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Farm'
        application/xml:
          schema:
            $ref: '#/components/schemas/Farm'
      description: Farm object that needs to be added to db
    Tunnel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tunnel'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tunnel'
    Device:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
        application/xml:
          schema:
            $ref: '#/components/schemas/Device'
      description: Tunnel object that needs to be added to db
    Person:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Person'
        application/xml:
          schema:
            $ref: '#/components/schemas/Person'
      description: Person object that needs to be added or removed from farm
    People:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Person'
      description: List of person objects
